{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE FlexibleContexts #-}

module HML.FileIO.CSVReader
(csvToBinary
, readCSV
) where

import Conduit ((.|), ConduitM, mapC, mapMC, sourceFileBS)
import qualified Data.ByteString as BS
import qualified Data.ByteString.Char8 as BSC
import Data.ByteString.Conversion (fromByteString, toByteString')
import Data.CSV.Conduit (defCSVSettings, intoCSV)
import Data.Serialize.Put (runPut)
import Data.Void (Void)
import HML.FileIO.AppIO (AppIO, liftAppIO)
import HML.FileIO.MatrixHeader (MatrixHeader(..))
import HML.FileIO.MatrixSink (matrixDoubleSink)
import HML.FileIO.MatrixSource (poolMatrixDouble)
import HML.Types.DoubleToBinary (doubleToBinary)

parseDoubles :: [BS.ByteString] -> Maybe [Double]
parseDoubles = sequence . map fromByteString

doublesToByteString :: String
                    -> Maybe [Double]
                    -> AppIO BS.ByteString
doublesToByteString str =
  maybe (liftAppIO . Left $ str)
    (liftAppIO . Right . foldMap (runPut . doubleToBinary))

parseBSDoubles :: [BS.ByteString] -> AppIO BS.ByteString
parseBSDoubles =
  let msg = "Failed parsing decimals from file"
  in doublesToByteString msg . parseDoubles

noEndl :: Char -> Bool
noEndl c = c /= '\n' && c /= '\r'

splitOnEndl :: BS.ByteString -> [BS.ByteString]
splitOnEndl bytes = if BS.length bytes < 1
  then []
  else let !(b,bs) = BSC.span noEndl bytes in
    if BS.length bs < 1
      then [b]
      else b:(splitOnEndl . BS.tail $ bs)

replaceEndl :: BS.ByteString -> BS.ByteString
replaceEndl =
 BS.intercalate (toByteString' ",") . splitOnEndl

readCSV
readCSV path = sourceFileBS path
       .| mapC replaceEndl
       .| intoCSV defCSVSettings

csvToBinary :: FilePath
            -> FilePath
            -> MatrixHeader
            -> ConduitM ()
                        Void
                        AppIO
                        ()
csvToBinary inPath outPath header = 
  let nCols = cols header
      nRows = rows header
  in readCSV inPath
  .| mapMC parseBSDoubles
  .| poolMatrixDouble nRows nCols
  .| matrixDoubleSink header outPath
