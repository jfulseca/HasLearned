{-# LANGUAGE FlexibleContexts #-}

module HML.FileIO.CSVReader
(convertToBinary) where
import HML.Aux
import Conduit ((.|), ConduitM, mapC, mapCE, mapMC, sourceFileBS, takeC, takeCE)
import Control.Monad.Trans.Class (lift)
import Control.Monad.Trans.Except (ExceptT(..))
import qualified Data.ByteString as BS
import Data.ByteString.Conversion (fromByteString)
import Data.CSV.Conduit (defCSVSettings, intoCSV)
import Data.Conduit.Binary (lines)
import Data.Serialize.Put (runPut)
import Data.Void (Void)
import Data.Word (Word8)
import HML.FileIO.FileReader (FileReader)
import HML.FileIO.MatrixHeader (MatrixHeader(..))
import HML.FileIO.MatrixSink (matrixDoubleSink)
import HML.FileIO.MatrixSource (poolMatrixDouble)
import HML.Types.DoubleToBinary (doubleToBinary)
import HML.Types.PosInt (getPosInt)
import Prelude hiding (concat, lines)

parseDoubles :: [BS.ByteString] -> Maybe [Double]
parseDoubles = sequence . map fromByteString

lifter :: Either String BS.ByteString -> FileReader BS.ByteString
lifter x = lift $ ExceptT (return x)

doublesToByteString :: String
                    -> Maybe [Double]
                    -> FileReader BS.ByteString
doublesToByteString str =
  maybe (lifter . Left $ str)
  (\ds -> lifter . Right $ foldMap (runPut . doubleToBinary) ds)

parseBSDoubles :: [BS.ByteString] -> FileReader BS.ByteString
parseBSDoubles =
  let msg = "Failed parsing decimals from file"
  in doublesToByteString msg . parseDoubles

replaceEndl :: BS.ByteString -> BS.ByteString
replaceEndl = BS.map (\w -> case w of
  \n -> 
  \r ->
  otherwise -> w)

convertToBinary :: FilePath
                -> FilePath
                -> MatrixHeader
                -> Int
                -> ConduitM ()
                            Void
                            FileReader
                            ()
convertToBinary inPath outPath header step = 
  let nCols = cols header
      nRows = rows header
      c = getPosInt nCols
  in sourceFileBS inPath
  .| printConduit ("incoming; step c " ++ (show step) ++ " " ++ (show c) ++ " ")
--  .| printConduit "before lines"
--  .| lines
  .| printConduit "before replaceEndl"
  .| mapC replaceEndl
  .| printConduit "before intoCSV"
  .| intoCSV defCSVSettings
  .| printConduit "before convert"
  .| mapMC parseBSDoubles
  .| printConduit "after convert"
  .| poolMatrixDouble nRows nCols
  .| matrixDoubleSink header outPath
