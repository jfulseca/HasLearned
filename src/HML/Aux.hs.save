module HML.Aux
( doubleSize
, errorContext
, showIO
, sl
) where

import Control.Monad.IO.Class (MonadIO, liftIO)
import Data.Either (either)
import Debug.Trace (traceIO)
import Foreign.Storable (sizeOf)

sl :: (Show a) => a -> String
sl a = (show a) ++ " "

showIO :: (MonadIO m) => String -> m ()
showIO = liftIO . traceIO

doubleSize :: Int
doubleSize = sizeOf (0 :: Double)

errorContext :: Either String a -> Either String a
errorContext = either id id
