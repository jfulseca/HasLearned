
==================== FINAL INTERFACE ====================
2017-11-20 04:54:04.799321 UTC

interface haslearned-0.1.0.0-1MYfuCwSlxlBXzMx3VqeuN:HML.FileIO.MatrixSink 8002
  interface hash: 8be3719cba668ea91b8856af3f3336da
  ABI hash: 7555bc350e65dc6e6c20786ee62782fa
  export-list hash: b93b09dd2ab50ff3ffc3ab98ea15bd18
  orphan hash: 8c767a31fb14ce24909c8e063ff84a75
  flag hash: bc3ee18da6820b4b049eac41cafbc431
  sig of: Nothing
  used TH splices: False
  where
exports:
  HML.FileIO.MatrixSink.matrixDoubleSink
module dependencies: HML.FileIO.AppIO HML.FileIO.MatrixHeader
                     HML.Types.Constants HML.Types.DoubleToBinary HML.Types.PosInt
                     HML.Types.TypeName
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ
                      base-4.9.1.0
                      base16-bytestring-0.1.1.6@base16-bytestring-0.1.1.6-4E2p94lTx8gIceMhu8Kl9o
                      base64-bytestring-1.0.0.1@base64-bytestring-1.0.0.1-4O9TExPPz6eI82Yj7L4SIj
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      bytestring-conversion-0.3.1@bytestring-conversion-0.3.1-KSK6l7QmbIf1TbIBILuJUV
                      case-insensitive-1.2.0.10@case-insensitive-1.2.0.10-1D5OUKQ7UrJ7IpOe0di4Un
                      cereal-0.5.4.0@cereal-0.5.4.0-BsAGxfp8yAs3CiRo2E875e
                      chunked-data-0.3.0@chunked-data-0.3.0-OOunTfArGE2y1nE8RKgW4
                      conduit-1.2.12.1@conduit-1.2.12.1-CTYKTJmwFo81r4LrAKDD8i
                      conduit-combinators-1.1.1@conduit-combinators-1.1.1-GtFbL9AxEDH5Bi4dHJqDcv
                      conduit-extra-1.1.17@conduit-extra-1.1.17-LHyPtC0nGlzDcgVxOcd4h4
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      double-conversion-2.0.2.0@double-conversion-2.0.2.0-Ls1AZoWRK0TKpzR8XpTsSD
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      filepath-1.4.1.1@filepath-1.4.1.1
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      hmatrix-0.18.0.0@hmatrix-0.18.0.0-LGKm3fIBRZO9Qs5hltonpj
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      lifted-base-0.2.3.11@lifted-base-0.2.3.11-Ei0JSPdt7KOCD2HIA5jFqV
                      mmorph-1.0.9@mmorph-1.0.9-5bASEvmIkr5CpdAYXwPsn0
                      monad-control-1.0.2.2@monad-control-1.0.2.2-1Ci8dYJ8Tb7E3HTcTqOb8l
                      mono-traversable-1.0.4.0@mono-traversable-1.0.4.0-4NjleFtgjZEBUffX1jBk6F
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      mwc-random-0.13.6.0@mwc-random-0.13.6.0-FYg9HqO0pqB8vcniiPVzVy
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      resourcet-1.1.9@resourcet-1.1.9-L2BUQrxWZMwDiwhcuyPuNi
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      split-0.2.3.2@split-0.2.3.2-CJl40zTyCIV16Pr60nb7CT
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      streaming-commons-0.1.17@streaming-commons-0.1.17-6xuIA5RXrs65yyeq3HWIWP
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      tf-random-0.5@tf-random-0.5-CJZw1ZWS5MOJlR60HqKEZL
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-base-0.4.4@transformers-base-0.4.4-GKSs0LKukAL8ymq2naFmrH
                      unix-2.7.2.1@unix-2.7.2.1
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
                      vector-algorithms-0.7.0.1@vector-algorithms-0.7.0.1-1qlx0Hst1Fo5WZd0lT7Iw1
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.ByteString.Char8
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         haslearned-0.1.0.0-1MYfuCwSlxlBXzMx3VqeuN:HML.Types.PosInt
         hmatrix-0.18.0.0@hmatrix-0.18.0.0-LGKm3fIBRZO9Qs5hltonpj:Internal.Element
         hmatrix-0.18.0.0@hmatrix-0.18.0.0-LGKm3fIBRZO9Qs5hltonpj:Internal.Util
         hmatrix-0.18.0.0@hmatrix-0.18.0.0-LGKm3fIBRZO9Qs5hltonpj:Internal.Vector
         hmatrix-0.18.0.0@hmatrix-0.18.0.0-LGKm3fIBRZO9Qs5hltonpj:Numeric.Matrix
         hmatrix-0.18.0.0@hmatrix-0.18.0.0-LGKm3fIBRZO9Qs5hltonpj:Numeric.Vector
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         conduit-1.2.12.1@conduit-1.2.12.1-CTYKTJmwFo81r4LrAKDD8i:Data.Conduit.Internal.Conduit
                         conduit-1.2.12.1@conduit-1.2.12.1-CTYKTJmwFo81r4LrAKDD8i:Data.Conduit.Internal.Pipe
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         hmatrix-0.18.0.0@hmatrix-0.18.0.0-LGKm3fIBRZO9Qs5hltonpj:Internal.Devel
                         hmatrix-0.18.0.0@hmatrix-0.18.0.0-LGKm3fIBRZO9Qs5hltonpj:Internal.Matrix
                         hmatrix-0.18.0.0@hmatrix-0.18.0.0-LGKm3fIBRZO9Qs5hltonpj:Internal.Modular
                         hmatrix-0.18.0.0@hmatrix-0.18.0.0-LGKm3fIBRZO9Qs5hltonpj:Internal.Numeric
                         monad-control-1.0.2.2@monad-control-1.0.2.2-1Ci8dYJ8Tb7E3HTcTqOb8l:Control.Monad.Trans.Control
                         mono-traversable-1.0.4.0@mono-traversable-1.0.4.0-4NjleFtgjZEBUffX1jBk6F:Data.MonoTraversable
                         mono-traversable-1.0.4.0@mono-traversable-1.0.4.0-4NjleFtgjZEBUffX1jBk6F:Data.NonNull
                         mono-traversable-1.0.4.0@mono-traversable-1.0.4.0-4NjleFtgjZEBUffX1jBk6F:Data.Sequences
                         mwc-random-0.13.6.0@mwc-random-0.13.6.0-FYg9HqO0pqB8vcniiPVzVy:System.Random.MWC
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         resourcet-1.1.9@resourcet-1.1.9-L2BUQrxWZMwDiwhcuyPuNi:Control.Monad.Trans.Resource.Internal
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Void 3c797a21706a51366e113ccecc813336
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.IO eb504c57b397cf133849f8586f15dafb
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString 43e99fdac51908da414a28958688da64
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Internal 89cda42ec946d9d6577dd41ab95d523e
import  -/  bytestring-conversion-0.3.1@bytestring-conversion-0.3.1-KSK6l7QmbIf1TbIBILuJUV:Data.ByteString.Conversion ff5b7c2f893209b9038238a8e75ea663
import  -/  bytestring-conversion-0.3.1@bytestring-conversion-0.3.1-KSK6l7QmbIf1TbIBILuJUV:Data.ByteString.Conversion.To 780591d36b5ca20d40e5412d5c0fdf88
import  -/  cereal-0.5.4.0@cereal-0.5.4.0-BsAGxfp8yAs3CiRo2E875e:Data.Serialize.Put d3a8f89ed508d520c8c683e7d8353f8f
import  -/  conduit-1.2.12.1@conduit-1.2.12.1-CTYKTJmwFo81r4LrAKDD8i:Data.Conduit 8d7ec43e22522a4dafe1e40081e3bcee
import  -/  conduit-1.2.12.1@conduit-1.2.12.1-CTYKTJmwFo81r4LrAKDD8i:Data.Conduit.Internal.Conduit cb2416e4318f4105196b90a1a4c4b9f2
import  -/  conduit-combinators-1.1.1@conduit-combinators-1.1.1-GtFbL9AxEDH5Bi4dHJqDcv:Conduit 4b8c71dec647b12e304799221bd3ba2e
import  -/  conduit-combinators-1.1.1@conduit-combinators-1.1.1-GtFbL9AxEDH5Bi4dHJqDcv:Data.Conduit.Combinators 47fdc740819fa4aa37b3877f8a6d0a66
import  -/  conduit-combinators-1.1.1@conduit-combinators-1.1.1-GtFbL9AxEDH5Bi4dHJqDcv:Data.Conduit.Combinators.Unqualified ad729553ca387c95a05a93841e33ba6e
import  -/  HML.FileIO.AppIO 996f0663a9234630e6f09df1c28d64d3
  exports: ec1bc10e02b198719ccbde6835fb6842
  AppIO a84e08d52531f43a49be181647819478
import  -/  HML.FileIO.MatrixHeader 55866bc7e98e7ba1f7fa5af73c65820d
  exports: 9663010371bc593925810eed4c69845b
  MatrixHeader b2ea802841815117022cbfe9bdee05b2
import  -/  HML.Types.DoubleToBinary a30e98382d43069f84888539b0421668
  exports: f6557fc8189fc77b42cbe085c4c819fd
  doubleToBinary bc362f0c369a1d37e67ca695f9940959
import  -/  hmatrix-0.18.0.0@hmatrix-0.18.0.0-LGKm3fIBRZO9Qs5hltonpj:Internal.Matrix 53638184b736d49afc503f161ceef1e2
import  -/  hmatrix-0.18.0.0@hmatrix-0.18.0.0-LGKm3fIBRZO9Qs5hltonpj:Numeric.LinearAlgebra.Data 9ebd9664f9d22e6d69a44fbe0dc7ae55
1d4ba77d653fc7f9d6416a66f0e1a14d
  $s$fApplicativeExceptT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (HML.FileIO.MatrixSink.$s$fApplicativeExceptT1 @ e)
                  (HML.FileIO.MatrixSink.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure
                     @ e)
                  (Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ GHC.Types.IO
                     @ e
                     HML.FileIO.MatrixSink.$s$fApplicativeExceptT_$dFunctor
                     GHC.Base.$fMonadIO)
                  (Control.Monad.Trans.Except.$fApplicativeExceptT_$c*>
                     @ GHC.Types.IO
                     @ e
                     HML.FileIO.MatrixSink.$s$fApplicativeExceptT_$dFunctor
                     GHC.Base.$fMonadIO)
                  (Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*
                     @ GHC.Types.IO
                     @ e
                     HML.FileIO.MatrixSink.$s$fApplicativeExceptT_$dFunctor
                     GHC.Base.$fMonadIO) -}
8c5b780a75c88486fb3effede00a575c
  $s$fApplicativeExceptT1 ::
    GHC.Base.Functor
      (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- Unfolding: (\ @ e ->
                 Control.Monad.Trans.Except.$fFunctorExceptT
                   @ GHC.Types.IO
                   @ e
                   GHC.Base.$fFunctorIO) -}
23b6ad0edd7b4d54e88cbee5297667d8
  $s$fApplicativeExceptT_$dFunctor :: GHC.Base.Functor GHC.Types.IO
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) GHC.Base.$fFunctorIO -}
1e6848ffdaf5de40f7d50304cf43a9b4
  $s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure ::
    a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ e @ a (a1 :: a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Types.IO (Data.Either.Either e a))
                   @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (\ (tpl :: GHC.Types.IO (Data.Either.Either e a)) -> tpl)
                     `cast`
                   (<GHC.Types.IO (Data.Either.Either e a)>_R
                    ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                  <e>_N <GHC.Types.IO>_R <a>_N))
                   (GHC.Base.returnIO
                      @ (Data.Either.Either e a)
                      (Data.Either.Right @ e @ a a1))) -}
37a86d70fce8932dd729f426e065f06d
  $s$fApplicativeResourceT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO))
                  HML.FileIO.MatrixSink.$s$fApplicativeResourceT_$s$fApplicativeResourceT_$cp1Applicative
                  HML.FileIO.MatrixSink.$s$fApplicativeResourceT_$s$fApplicativeResourceT_$cpure
                  (Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT_$c<*>
                     @ (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO)
                     HML.FileIO.MatrixSink.$s$fApplicativeResourceT1)
                  (Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT_$c*>
                     @ (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO)
                     HML.FileIO.MatrixSink.$s$fApplicativeResourceT1)
                  (Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT_$c<*
                     @ (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO)
                     HML.FileIO.MatrixSink.$s$fApplicativeResourceT1) -}
908db9345a3ecdfefe884579e653254f
  $s$fApplicativeResourceT1 ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (HML.FileIO.MatrixSink.$s$fApplicativeExceptT
                   @ [GHC.Types.Char]) -}
15b93f7ca4af57fd5932b82e614357de
  $s$fApplicativeResourceT_$dFunctor ::
    GHC.Base.Functor
      (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO)
  {- Unfolding: InlineRule (0, True, True)
                (HML.FileIO.MatrixSink.$s$fApplicativeExceptT1
                   @ [GHC.Types.Char]) -}
7e94a9986c4ca1bda758b05fe8066ffe
  $s$fApplicativeResourceT_$s$fApplicativeResourceT_$cp1Applicative ::
    GHC.Base.Functor
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                HML.FileIO.MatrixSink.$s$fApplicativeResourceT_$s$fFunctorResourceT -}
17790971e25ec54c9597f15742eafe50
  $s$fApplicativeResourceT_$s$fApplicativeResourceT_$cpure ::
    a
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO) a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (eta :: a) ->
                 let {
                   x :: Control.Monad.Trans.Except.ExceptT
                          GHC.Base.String GHC.Types.IO a
                   = GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO (Data.Either.Either [GHC.Types.Char] a))
                       @ (Control.Monad.Trans.Except.ExceptT
                            [GHC.Types.Char] GHC.Types.IO a)
                       (\ (tpl :: GHC.Types.IO (Data.Either.Either [GHC.Types.Char] a)) ->
                        tpl)
                         `cast`
                       (<GHC.Types.IO (Data.Either.Either [GHC.Types.Char] a)>_R
                        ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                      <[GHC.Types.Char]>_N <GHC.Types.IO>_R <a>_N))
                       (GHC.Base.returnIO
                          @ (Data.Either.Either [GHC.Types.Char] a)
                          (Data.Either.Right @ [GHC.Types.Char] @ a eta))
                 } in
                 (\ (ds :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                  x)
                   `cast`
                 (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                           <Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO>_R
                           <a>_N))) -}
f1647dcfa68d500ae47b42a6071469a7
  $s$fApplicativeResourceT_$s$fFunctorResourceT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO))
                  (Control.Monad.Trans.Resource.Internal.$fFunctorResourceT_$cfmap
                     @ (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO)
                     HML.FileIO.MatrixSink.$s$fApplicativeResourceT_$dFunctor)
                  (Control.Monad.Trans.Resource.Internal.$fFunctorResourceT_$c<$
                     @ (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO)
                     HML.FileIO.MatrixSink.$s$fApplicativeResourceT_$dFunctor) -}
2437a58c44af476524855c9a72f12b96
  $s$fMonadBasebContT_$cp1MonadBase ::
    GHC.Base.Applicative GHC.Types.IO
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (\ @ r -> GHC.Base.$fApplicativeIO) -}
61f7ea4a77de511652affae4cacd3be9
  $s$fMonadBasebContT_$cp3MonadBase :: GHC.Base.Monad GHC.Types.IO
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (\ @ r -> GHC.Base.$fMonadIO) -}
df664a2abbf6496810fc5dd106f5765f
  $s$fMonadBasebExceptT ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ e.
                  @ GHC.Types.IO
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (HML.FileIO.MatrixSink.$s$fMonadBasebContT_$cp1MonadBase @ e)
                  (Control.Monad.Base.$fMonadBasebExceptT_$cp2MonadBase
                     @ GHC.Types.IO
                     @ GHC.Types.IO
                     @ e
                     Control.Monad.Base.$fMonadBaseIOIO)
                  (HML.FileIO.MatrixSink.$s$fMonadBasebContT_$cp3MonadBase @ e)
                  (HML.FileIO.MatrixSink.$s$fMonadBasebExceptT_$s$fMonadThrowExceptT_$cp1MonadThrow
                     @ e)
                  (Control.Monad.Base.$fMonadBasebExceptT_$cliftBase
                     @ GHC.Types.IO
                     @ GHC.Types.IO
                     @ e
                     Control.Monad.Base.$fMonadBaseIOIO) -}
6ac95a656547a519f204680c826cc7ea
  $s$fMonadBasebExceptT_$s$fMonadExceptT ::
    GHC.Base.Monad (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (HML.FileIO.MatrixSink.$s$fMonadBasebExceptT_$s$fMonadExceptT_$cp1Monad
                     @ e)
                  (HML.FileIO.MatrixSink.$s$fMonadBasebExceptT_$s$fMonadExceptT_$c>>=
                     @ e)
                  (HML.FileIO.MatrixSink.$s$fMonadBasebExceptT_$s$fMonadExceptT_$c>>
                     @ e)
                  (Control.Monad.Trans.Except.$fMonadExceptT_$creturn
                     @ GHC.Types.IO
                     @ e
                     GHC.Base.$fMonadIO)
                  (\ @ a (eta :: GHC.Base.String) ->
                   GHC.Base.$fMonadIO_$cfail @ (Data.Either.Either e a) eta)
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Base.String>_R
                   ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                 <e>_N <GHC.Types.IO>_R <a>_N)) -}
7e7d015d7ff3e9bbc942ebac1dc74f80
  $s$fMonadBasebExceptT_$s$fMonadExceptT_$c>> ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,U))><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m2 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (k :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Types.IO (Data.Either.Either e b))
                   @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
                   (\ (tpl :: GHC.Types.IO (Data.Either.Either e b)) -> tpl)
                     `cast`
                   (<GHC.Types.IO (Data.Either.Either e b)>_R
                    ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                  <e>_N <GHC.Types.IO>_R <b>_N))
                   (GHC.Base.bindIO
                      @ (Data.Either.Either e a)
                      @ (Data.Either.Either e b)
                      m2
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a>_N)
                      (\ (a1 :: Data.Either.Either e a)
                         (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       case a1 of wild {
                         Data.Either.Left e1
                         -> (GHC.Base.returnIO
                               @ (Data.Either.Either e b)
                               (Data.Either.Left @ e @ b e1))
                              `cast`
                            (GHC.Types.N:IO[0] <Data.Either.Either e b>_R)
                              eta
                         Data.Either.Right x
                         -> k `cast`
                            (Trans
                                 (Control.Monad.Trans.Except.N:ExceptT[0]
                                      <e>_N <GHC.Types.IO>_R <b>_N)
                                 (GHC.Types.N:IO[0] <Data.Either.Either e b>_R))
                              eta })
                        `cast`
                      (<Data.Either.Either e a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Data.Either.Either e b>_R)))) -}
eefe576759432b60c4957aaeb3456d3e
  $s$fMonadBasebExceptT_$s$fMonadExceptT_$c>>= ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> (a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(C1(U(U,U)))><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m2 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (k :: a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Types.IO (Data.Either.Either e b))
                   @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
                   (\ (tpl :: GHC.Types.IO (Data.Either.Either e b)) -> tpl)
                     `cast`
                   (<GHC.Types.IO (Data.Either.Either e b)>_R
                    ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                  <e>_N <GHC.Types.IO>_R <b>_N))
                   (GHC.Base.bindIO
                      @ (Data.Either.Either e a)
                      @ (Data.Either.Either e b)
                      m2
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a>_N)
                      (\ (a1 :: Data.Either.Either e a)
                         (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       case a1 of wild {
                         Data.Either.Left e1
                         -> (GHC.Base.returnIO
                               @ (Data.Either.Either e b)
                               (Data.Either.Left @ e @ b e1))
                              `cast`
                            (GHC.Types.N:IO[0] <Data.Either.Either e b>_R)
                              eta
                         Data.Either.Right x
                         -> (k x)
                              `cast`
                            (Trans
                                 (Control.Monad.Trans.Except.N:ExceptT[0]
                                      <e>_N <GHC.Types.IO>_R <b>_N)
                                 (GHC.Types.N:IO[0] <Data.Either.Either e b>_R))
                              eta })
                        `cast`
                      (<Data.Either.Either e a>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Data.Either.Either e b>_R)))) -}
40cdf4183204491bb0c73fc72e30863b
  $s$fMonadBasebExceptT_$s$fMonadExceptT_$cp1Monad ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                HML.FileIO.MatrixSink.$s$fApplicativeExceptT -}
37be14428af1b984fd06b1e2fae151ea
  $s$fMonadBasebExceptT_$s$fMonadThrowExceptT_$cp1MonadThrow ::
    GHC.Base.Monad (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                HML.FileIO.MatrixSink.$s$fMonadBasebExceptT_$s$fMonadExceptT -}
74ca37ae9b12055fd86cfe79be98b05f
  $s$fMonadBasebResourceT ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO))
                  (HML.FileIO.MatrixSink.$s$fMonadBasebContT_$cp1MonadBase
                     @ [GHC.Types.Char])
                  HML.FileIO.MatrixSink.$s$fMonadBasebResourceT_$s$fMonadBasebResourceT_$cp2MonadBase
                  (HML.FileIO.MatrixSink.$s$fMonadBasebContT_$cp3MonadBase
                     @ [GHC.Types.Char])
                  HML.FileIO.MatrixSink.$s$fMonadBasebResourceT_$s$fMonadIOResourceT_$cp1MonadIO
                  HML.FileIO.MatrixSink.$s$fMonadBasebResourceT_$s$fMonadBasebResourceT_$cliftBase -}
40045f5621847f581a3fdb0dda201628
  $s$fMonadBasebResourceT1 ::
    GHC.Base.Monad
      (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (HML.FileIO.MatrixSink.$s$fMonadBasebExceptT_$s$fMonadExceptT
                   @ [GHC.Types.Char]) -}
e89c185d8adfcc9818c1bb09491af9c3
  $s$fMonadBasebResourceT_$s$fMonadBasebResourceT_$cliftBase ::
    GHC.Types.IO α
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO) α
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(U,U))><L,A><S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ α (eta :: GHC.Types.IO α) ->
                 let {
                   eta1 :: Control.Monad.Trans.Except.ExceptT
                             GHC.Base.String GHC.Types.IO α
                   = Control.Monad.Base.$fMonadBasebExceptT_$cliftBase
                       @ GHC.Types.IO
                       @ GHC.Types.IO
                       @ [GHC.Types.Char]
                       Control.Monad.Base.$fMonadBaseIOIO
                       @ α
                       eta
                 } in
                 (\ (ds :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                  eta1)
                   `cast`
                 (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                           <Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO>_R
                           <α>_N))) -}
e30e625e7b6bb82ffbbb75f4d90b83e1
  $s$fMonadBasebResourceT_$s$fMonadBasebResourceT_$cp2MonadBase ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                HML.FileIO.MatrixSink.$s$fApplicativeResourceT -}
7052eeda52d11ef1593fe7228ac25201
  $s$fMonadBasebResourceT_$s$fMonadIOResourceT_$cp1MonadIO ::
    GHC.Base.Monad
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                HML.FileIO.MatrixSink.$s$fMonadBasebResourceT_$s$fMonadResourceT -}
a08aaf81b8f56e1660a7aaa79502c5be
  $s$fMonadBasebResourceT_$s$fMonadResourceT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO))
                  HML.FileIO.MatrixSink.$s$fMonadBasebResourceT_$s$fMonadBasebResourceT_$cp2MonadBase
                  (Control.Monad.Trans.Resource.Internal.$fMonadResourceT_$c>>=
                     @ (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO)
                     HML.FileIO.MatrixSink.$s$fMonadBasebResourceT1)
                  (Control.Monad.Trans.Resource.Internal.$fMonadResourceT_$c>>
                     @ (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO)
                     HML.FileIO.MatrixSink.$s$fMonadBasebResourceT1)
                  HML.FileIO.MatrixSink.$s$fApplicativeResourceT_$s$fApplicativeResourceT_$cpure
                  HML.FileIO.MatrixSink.$s$fMonadBasebResourceT_$s$fMonadResourceT_$cfail -}
d3ae80c34213ea95ff9918f8a35b72db
  $s$fMonadBasebResourceT_$s$fMonadResourceT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO) a
  {- Arity: 1, Strictness: <B,U>x,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (eta :: GHC.Base.String) ->
                 Control.Monad.Trans.Resource.Internal.$fMonadResourceT1
                   @ (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO)
                   @ a
                   HML.FileIO.MatrixSink.$s$fMonadBasebResourceT1
                   eta) -}
076eb67c8726a807549e29771f69e77d
  $s$fMonadIOExceptT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (HML.FileIO.MatrixSink.$s$fMonadBasebExceptT_$s$fMonadThrowExceptT_$cp1MonadThrow
                     @ e)
                  (\ @ a
                     (eta :: GHC.Types.IO a)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.$fFunctorIO_$cfmap
                      @ a
                      @ (Data.Either.Either e a)
                      (Data.Either.Right @ e @ a)
                      (GHC.Base.id @ (GHC.Types.IO a) eta))
                     `cast`
                   (GHC.Types.N:IO[0] <Data.Either.Either e a>_R)
                     eta1)
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Types.IO a>_R
                   ->_R Trans
                            (Sym (GHC.Types.N:IO[0] <Data.Either.Either e a>_R))
                            (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                      <e>_N <GHC.Types.IO>_R <a>_N))) -}
a6c5648762b2d6b491af16bf4c7024fa
  $s$fMonadIOResourceT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO))
                  HML.FileIO.MatrixSink.$s$fMonadBasebResourceT_$s$fMonadIOResourceT_$cp1MonadIO
                  HML.FileIO.MatrixSink.$s$fMonadBasebResourceT_$s$fMonadBasebResourceT_$cliftBase -}
6f2340073f4c2103236ba7c3a27dd875
  $s$fMonadResourceResourceT ::
    Control.Monad.Trans.Resource.Internal.MonadResource
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO))
                  HML.FileIO.MatrixSink.$s$fMonadResourceResourceT_$s$fMonadResourceResourceT_$cp1MonadResource
                  HML.FileIO.MatrixSink.$s$fMonadResourceResourceT_$s$fMonadResourceResourceT_$cp2MonadResource
                  HML.FileIO.MatrixSink.$s$fMonadBasebResourceT_$s$fMonadBasebResourceT_$cp2MonadBase
                  HML.FileIO.MatrixSink.$s$fMonadResourceResourceT_$s$fMonadResourceResourceT_$cp4MonadResource
                  (Control.Monad.Trans.Resource.Internal.$fMonadResourceResourceT_$cliftResourceT
                     @ (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO)
                     HML.FileIO.MatrixSink.$s$fMonadResourceResourceT3
                     HML.FileIO.MatrixSink.$s$fMonadResourceResourceT2
                     HML.FileIO.MatrixSink.$s$fMonadResourceResourceT1
                     HML.FileIO.MatrixSink.$s$fApplicativeResourceT1) -}
7d99d16715a32de490f4ce3541bb62e5
  $s$fMonadResourceResourceT1 ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (HML.FileIO.MatrixSink.$s$fMonadIOExceptT @ [GHC.Types.Char]) -}
786a24ca3fd3622e419a6e38c8c14d6d
  $s$fMonadResourceResourceT2 ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO
      (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (HML.FileIO.MatrixSink.$s$fMonadBasebExceptT @ [GHC.Types.Char]) -}
c5a0b7a6f2fbef3ee95189b369379dfe
  $s$fMonadResourceResourceT3 ::
    Control.Monad.Catch.MonadThrow
      (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (HML.FileIO.MatrixSink.$s$fMonadResourceResourceT_$s$fMonadThrowExceptT
                   @ [GHC.Types.Char]) -}
79db69cc7b71302e679755fbde096aae
  $s$fMonadResourceResourceT_$s$fMonadResourceResourceT_$cp1MonadResource ::
    Control.Monad.Catch.MonadThrow
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                HML.FileIO.MatrixSink.$s$fMonadResourceResourceT_$s$fMonadThrowResourceT -}
e400944dc9e1e8df08c37b2ef5407e09
  $s$fMonadResourceResourceT_$s$fMonadResourceResourceT_$cp2MonadResource ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                HML.FileIO.MatrixSink.$s$fMonadIOResourceT -}
042353bef8753eee52c3dc4bf3fe44f4
  $s$fMonadResourceResourceT_$s$fMonadResourceResourceT_$cp4MonadResource ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                HML.FileIO.MatrixSink.$s$fMonadBasebResourceT -}
8d9c08125bdab8936a2c3a6d855fa598
  $s$fMonadResourceResourceT_$s$fMonadThrowExceptT ::
    Control.Monad.Catch.MonadThrow
      (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (HML.FileIO.MatrixSink.$s$fMonadBasebExceptT_$s$fMonadThrowExceptT_$cp1MonadThrow
                     @ e)
                  (Control.Monad.Catch.$fMonadThrowExceptT_$cthrowM
                     @ GHC.Types.IO
                     @ e
                     Control.Monad.Catch.$fMonadThrowIO) -}
74d0b15745e4f284b73daedae75b2301
  $s$fMonadResourceResourceT_$s$fMonadThrowResourceT ::
    Control.Monad.Catch.MonadThrow
      (Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Resource.Internal.ResourceT
                       (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO))
                  HML.FileIO.MatrixSink.$s$fMonadBasebResourceT_$s$fMonadIOResourceT_$cp1MonadIO
                  HML.FileIO.MatrixSink.$s$fMonadResourceResourceT_$s$fMonadThrowResourceT_$cthrowM -}
f80e598cf3ecdcf356308b2869877e2d
  $s$fMonadResourceResourceT_$s$fMonadThrowResourceT_$cthrowM ::
    GHC.Exception.Exception e =>
    e
    -> Control.Monad.Trans.Resource.Internal.ResourceT
         (Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO) a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <B,1*U(A,A,1*C1(U),A,A)><B,U><B,A><B,U>b,
     Unfolding: InlineRule (1, True, False)
                (\ @ e @ a (eta :: GHC.Exception.Exception e) ->
                 let {
                   g :: e
                        -> Control.Monad.Trans.Except.ExceptT
                             GHC.Base.String GHC.Types.IO a
                   = Control.Monad.Catch.$fMonadThrowExceptT_$cthrowM
                       @ GHC.Types.IO
                       @ [GHC.Types.Char]
                       Control.Monad.Catch.$fMonadThrowIO
                       @ e
                       @ a
                       eta
                 } in
                 \ (x :: e) ->
                 let {
                   eta1 :: Control.Monad.Trans.Except.ExceptT
                             GHC.Base.String GHC.Types.IO a
                   = g x
                 } in
                 (\ (ds :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                  eta1)
                   `cast`
                 (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                           <Control.Monad.Trans.Except.ExceptT GHC.Base.String GHC.Types.IO>_R
                           <a>_N))) -}
b9053d7b68e1b493cfc2a58f2c0beb61
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   HML.FileIO.MatrixSink.$trModule2
                   HML.FileIO.MatrixSink.$trModule1) -}
d6d057c3a8b99a48822b5ee528cf7fdb
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "HML.FileIO.MatrixSink"#) -}
b3cfe28d3e2fe84ebfa6ed9e430e4386
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "haslearned-0.1.0.0-1MYfuCwSlxlBXzMx3VqeuN"#) -}
04dc4d2e68bb97ec2aa4ca49c716defe
  matrixDoubleSink ::
    HML.FileIO.MatrixHeader.MatrixHeader
    -> GHC.IO.FilePath
    -> Data.Conduit.Internal.Conduit.ConduitM
         (Internal.Matrix.Matrix GHC.Types.Double)
         Data.Void.Void
         HML.FileIO.AppIO.AppIO
         ()
  {- Arity: 2, Strictness: <L,U(U,U(U),U(U))><L,U> -}
"SPEC/HML.FileIO.MatrixSink $fApplicativeExceptT @ IO _" [ALWAYS] forall @ e
                                                                         ($dMonad :: GHC.Base.Monad
                                                                                       GHC.Types.IO)
                                                                         ($dFunctor :: GHC.Base.Functor
                                                                                         GHC.Types.IO)
  Control.Monad.Trans.Except.$fApplicativeExceptT @ GHC.Types.IO
                                                  @ e
                                                  $dFunctor
                                                  $dMonad
  = HML.FileIO.MatrixSink.$s$fApplicativeExceptT @ e
"SPEC/HML.FileIO.MatrixSink $fApplicativeExceptT_$cpure @ IO _" [ALWAYS] forall @ e
                                                                                ($dMonad :: GHC.Base.Monad
                                                                                              GHC.Types.IO)
                                                                                ($dFunctor :: GHC.Base.Functor
                                                                                                GHC.Types.IO)
  Control.Monad.Trans.Except.$fApplicativeExceptT_$cpure @ GHC.Types.IO
                                                         @ e
                                                         $dFunctor
                                                         $dMonad
  = HML.FileIO.MatrixSink.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure
      @ e
"SPEC/HML.FileIO.MatrixSink $fApplicativeResourceT @ (ExceptT
                                                       String IO)" [ALWAYS] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                     (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                        GHC.Base.String
                                                                                                                                                                        GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT @ (Control.Monad.Trans.Except.ExceptT
                                                                    GHC.Base.String GHC.Types.IO)
                                                               $dApplicative
  = HML.FileIO.MatrixSink.$s$fApplicativeResourceT
"SPEC/HML.FileIO.MatrixSink $fApplicativeResourceT_$cp1Applicative @ (ExceptT
                                                                       String IO)" [ALWAYS] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                                                     (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                        GHC.Base.String
                                                                                                                                                                                                        GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT_$cp1Applicative @ (Control.Monad.Trans.Except.ExceptT
                                                                                    GHC.Base.String
                                                                                    GHC.Types.IO)
                                                                               $dApplicative
  = HML.FileIO.MatrixSink.$s$fApplicativeResourceT_$s$fApplicativeResourceT_$cp1Applicative
"SPEC/HML.FileIO.MatrixSink $fApplicativeResourceT_$cpure @ (ExceptT
                                                              String IO)" [ALWAYS] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                                   (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                      GHC.Base.String
                                                                                                                                                                                      GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fApplicativeResourceT_$cpure @ (Control.Monad.Trans.Except.ExceptT
                                                                           GHC.Base.String
                                                                           GHC.Types.IO)
                                                                      $dApplicative
  = HML.FileIO.MatrixSink.$s$fApplicativeResourceT_$s$fApplicativeResourceT_$cpure
"SPEC/HML.FileIO.MatrixSink $fFunctorResourceT @ (ExceptT String IO)" [ALWAYS] forall ($dFunctor :: GHC.Base.Functor
                                                                                                      (Control.Monad.Trans.Except.ExceptT
                                                                                                         GHC.Base.String
                                                                                                         GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fFunctorResourceT @ (Control.Monad.Trans.Except.ExceptT
                                                                GHC.Base.String GHC.Types.IO)
                                                           $dFunctor
  = HML.FileIO.MatrixSink.$s$fApplicativeResourceT_$s$fFunctorResourceT
"SPEC/HML.FileIO.MatrixSink $fMonadBasebContT_$cp1MonadBase @ IO @ IO _" [ALWAYS] forall @ r
                                                                                         ($dMonadBase :: Control.Monad.Base.MonadBase
                                                                                                           GHC.Types.IO
                                                                                                           GHC.Types.IO)
  Control.Monad.Base.$fMonadBasebContT_$cp1MonadBase @ GHC.Types.IO
                                                     @ GHC.Types.IO
                                                     @ r
                                                     $dMonadBase
  = HML.FileIO.MatrixSink.$s$fMonadBasebContT_$cp1MonadBase @ r
"SPEC/HML.FileIO.MatrixSink $fMonadBasebContT_$cp3MonadBase @ IO @ IO _" [ALWAYS] forall @ r
                                                                                         ($dMonadBase :: Control.Monad.Base.MonadBase
                                                                                                           GHC.Types.IO
                                                                                                           GHC.Types.IO)
  Control.Monad.Base.$fMonadBasebContT_$cp3MonadBase @ GHC.Types.IO
                                                     @ GHC.Types.IO
                                                     @ r
                                                     $dMonadBase
  = HML.FileIO.MatrixSink.$s$fMonadBasebContT_$cp3MonadBase @ r
"SPEC/HML.FileIO.MatrixSink $fMonadBasebExceptT @ IO @ IO _" [ALWAYS] forall @ e
                                                                             ($dMonadBase :: Control.Monad.Base.MonadBase
                                                                                               GHC.Types.IO
                                                                                               GHC.Types.IO)
  Control.Monad.Base.$fMonadBasebExceptT @ GHC.Types.IO
                                         @ GHC.Types.IO
                                         @ e
                                         $dMonadBase
  = HML.FileIO.MatrixSink.$s$fMonadBasebExceptT @ e
"SPEC/HML.FileIO.MatrixSink $fMonadBasebResourceT @ IO @ (ExceptT
                                                           String IO)" [ALWAYS] forall ($dMonadBase :: Control.Monad.Base.MonadBase
                                                                                                                                                                           GHC.Types.IO
                                                                                                                                                                           (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                              GHC.Base.String
                                                                                                                                                                              GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fMonadBasebResourceT @ GHC.Types.IO
                                                              @ (Control.Monad.Trans.Except.ExceptT
                                                                   GHC.Base.String GHC.Types.IO)
                                                              $dMonadBase
  = HML.FileIO.MatrixSink.$s$fMonadBasebResourceT
"SPEC/HML.FileIO.MatrixSink $fMonadBasebResourceT_$cliftBase @ IO @ (ExceptT
                                                                      String IO)" [ALWAYS] forall ($dMonadBase :: Control.Monad.Base.MonadBase
                                                                                                                                                                                                 GHC.Types.IO
                                                                                                                                                                                                 (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    GHC.Base.String
                                                                                                                                                                                                    GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fMonadBasebResourceT_$cliftBase @ GHC.Types.IO
                                                                         @ (Control.Monad.Trans.Except.ExceptT
                                                                              GHC.Base.String
                                                                              GHC.Types.IO)
                                                                         $dMonadBase
  = HML.FileIO.MatrixSink.$s$fMonadBasebResourceT_$s$fMonadBasebResourceT_$cliftBase
"SPEC/HML.FileIO.MatrixSink $fMonadBasebResourceT_$cp2MonadBase @ IO @ (ExceptT
                                                                         String IO)" [ALWAYS] forall ($dMonadBase :: Control.Monad.Base.MonadBase
                                                                                                                                                                                                       GHC.Types.IO
                                                                                                                                                                                                       (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                          GHC.Base.String
                                                                                                                                                                                                          GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fMonadBasebResourceT_$cp2MonadBase @ GHC.Types.IO
                                                                            @ (Control.Monad.Trans.Except.ExceptT
                                                                                 GHC.Base.String
                                                                                 GHC.Types.IO)
                                                                            $dMonadBase
  = HML.FileIO.MatrixSink.$s$fMonadBasebResourceT_$s$fMonadBasebResourceT_$cp2MonadBase
"SPEC/HML.FileIO.MatrixSink $fMonadExceptT @ IO _" [ALWAYS] forall @ e
                                                                   ($dMonad :: GHC.Base.Monad
                                                                                 GHC.Types.IO)
  Control.Monad.Trans.Except.$fMonadExceptT @ GHC.Types.IO
                                            @ e
                                            $dMonad
  = HML.FileIO.MatrixSink.$s$fMonadBasebExceptT_$s$fMonadExceptT @ e
"SPEC/HML.FileIO.MatrixSink $fMonadExceptT_$c>> @ IO _" [ALWAYS] forall @ e
                                                                        ($dMonad :: GHC.Base.Monad
                                                                                      GHC.Types.IO)
  Control.Monad.Trans.Except.$fMonadExceptT_$c>> @ GHC.Types.IO
                                                 @ e
                                                 $dMonad
  = HML.FileIO.MatrixSink.$s$fMonadBasebExceptT_$s$fMonadExceptT_$c>>
      @ e
"SPEC/HML.FileIO.MatrixSink $fMonadExceptT_$c>>= @ IO _" [ALWAYS] forall @ e
                                                                         ($dMonad :: GHC.Base.Monad
                                                                                       GHC.Types.IO)
  Control.Monad.Trans.Except.$fMonadExceptT_$c>>= @ GHC.Types.IO
                                                  @ e
                                                  $dMonad
  = HML.FileIO.MatrixSink.$s$fMonadBasebExceptT_$s$fMonadExceptT_$c>>=
      @ e
"SPEC/HML.FileIO.MatrixSink $fMonadExceptT_$cp1Monad @ IO _" [ALWAYS] forall @ e
                                                                             ($dMonad :: GHC.Base.Monad
                                                                                           GHC.Types.IO)
  Control.Monad.Trans.Except.$fMonadExceptT_$cp1Monad @ GHC.Types.IO
                                                      @ e
                                                      $dMonad
  = HML.FileIO.MatrixSink.$s$fMonadBasebExceptT_$s$fMonadExceptT_$cp1Monad
      @ e
"SPEC/HML.FileIO.MatrixSink $fMonadIOExceptT @ IO _" [ALWAYS] forall @ e
                                                                     ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                     GHC.Types.IO)
  Control.Monad.Trans.Except.$fMonadIOExceptT @ GHC.Types.IO
                                              @ e
                                              $dMonadIO
  = HML.FileIO.MatrixSink.$s$fMonadIOExceptT @ e
"SPEC/HML.FileIO.MatrixSink $fMonadIOResourceT @ (ExceptT String IO)" [ALWAYS] forall ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                                      (Control.Monad.Trans.Except.ExceptT
                                                                                                         GHC.Base.String
                                                                                                         GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fMonadIOResourceT @ (Control.Monad.Trans.Except.ExceptT
                                                                GHC.Base.String GHC.Types.IO)
                                                           $dMonadIO
  = HML.FileIO.MatrixSink.$s$fMonadIOResourceT
"SPEC/HML.FileIO.MatrixSink $fMonadIOResourceT_$cp1MonadIO @ (ExceptT
                                                               String IO)" [ALWAYS] forall ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                                                                                                                 (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                    GHC.Base.String
                                                                                                                                                                                    GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fMonadIOResourceT_$cp1MonadIO @ (Control.Monad.Trans.Except.ExceptT
                                                                            GHC.Base.String
                                                                            GHC.Types.IO)
                                                                       $dMonadIO
  = HML.FileIO.MatrixSink.$s$fMonadBasebResourceT_$s$fMonadIOResourceT_$cp1MonadIO
"SPEC/HML.FileIO.MatrixSink $fMonadResourceResourceT @ (ExceptT
                                                         String IO)" [ALWAYS] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                         (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                            GHC.Base.String
                                                                                                                                                                            GHC.Types.IO))
                                                                                                                                                     ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                                                                                                     (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                        GHC.Base.String
                                                                                                                                                                        GHC.Types.IO))
                                                                                                                                                     ($dMonadBase :: Control.Monad.Base.MonadBase
                                                                                                                                                                       GHC.Types.IO
                                                                                                                                                                       (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                          GHC.Base.String
                                                                                                                                                                          GHC.Types.IO))
                                                                                                                                                     ($dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                                                                                                        (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                           GHC.Base.String
                                                                                                                                                                           GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fMonadResourceResourceT @ (Control.Monad.Trans.Except.ExceptT
                                                                      GHC.Base.String GHC.Types.IO)
                                                                 $dMonadThrow
                                                                 $dMonadBase
                                                                 $dMonadIO
                                                                 $dApplicative
  = HML.FileIO.MatrixSink.$s$fMonadResourceResourceT
"SPEC/HML.FileIO.MatrixSink $fMonadResourceResourceT_$cp1MonadResource @ (ExceptT
                                                                           String IO)" [ALWAYS] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                                                             (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                GHC.Base.String
                                                                                                                                                                                                                GHC.Types.IO))
                                                                                                                                                                                         ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                                                                                                                                         (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                            GHC.Base.String
                                                                                                                                                                                                            GHC.Types.IO))
                                                                                                                                                                                         ($dMonadBase :: Control.Monad.Base.MonadBase
                                                                                                                                                                                                           GHC.Types.IO
                                                                                                                                                                                                           (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                              GHC.Base.String
                                                                                                                                                                                                              GHC.Types.IO))
                                                                                                                                                                                         ($dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                                                                                                                                            (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                               GHC.Base.String
                                                                                                                                                                                                               GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fMonadResourceResourceT_$cp1MonadResource @ (Control.Monad.Trans.Except.ExceptT
                                                                                        GHC.Base.String
                                                                                        GHC.Types.IO)
                                                                                   $dMonadThrow
                                                                                   $dMonadBase
                                                                                   $dMonadIO
                                                                                   $dApplicative
  = HML.FileIO.MatrixSink.$s$fMonadResourceResourceT_$s$fMonadResourceResourceT_$cp1MonadResource
"SPEC/HML.FileIO.MatrixSink $fMonadResourceResourceT_$cp2MonadResource @ (ExceptT
                                                                           String IO)" [ALWAYS] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                                                             (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                GHC.Base.String
                                                                                                                                                                                                                GHC.Types.IO))
                                                                                                                                                                                         ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                                                                                                                                         (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                            GHC.Base.String
                                                                                                                                                                                                            GHC.Types.IO))
                                                                                                                                                                                         ($dMonadBase :: Control.Monad.Base.MonadBase
                                                                                                                                                                                                           GHC.Types.IO
                                                                                                                                                                                                           (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                              GHC.Base.String
                                                                                                                                                                                                              GHC.Types.IO))
                                                                                                                                                                                         ($dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                                                                                                                                            (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                               GHC.Base.String
                                                                                                                                                                                                               GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fMonadResourceResourceT_$cp2MonadResource @ (Control.Monad.Trans.Except.ExceptT
                                                                                        GHC.Base.String
                                                                                        GHC.Types.IO)
                                                                                   $dMonadThrow
                                                                                   $dMonadBase
                                                                                   $dMonadIO
                                                                                   $dApplicative
  = HML.FileIO.MatrixSink.$s$fMonadResourceResourceT_$s$fMonadResourceResourceT_$cp2MonadResource
"SPEC/HML.FileIO.MatrixSink $fMonadResourceResourceT_$cp4MonadResource @ (ExceptT
                                                                           String IO)" [ALWAYS] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                                                             (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                GHC.Base.String
                                                                                                                                                                                                                GHC.Types.IO))
                                                                                                                                                                                         ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                                                                                                                                                         (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                            GHC.Base.String
                                                                                                                                                                                                            GHC.Types.IO))
                                                                                                                                                                                         ($dMonadBase :: Control.Monad.Base.MonadBase
                                                                                                                                                                                                           GHC.Types.IO
                                                                                                                                                                                                           (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                              GHC.Base.String
                                                                                                                                                                                                              GHC.Types.IO))
                                                                                                                                                                                         ($dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                                                                                                                                            (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                               GHC.Base.String
                                                                                                                                                                                                               GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fMonadResourceResourceT_$cp4MonadResource @ (Control.Monad.Trans.Except.ExceptT
                                                                                        GHC.Base.String
                                                                                        GHC.Types.IO)
                                                                                   $dMonadThrow
                                                                                   $dMonadBase
                                                                                   $dMonadIO
                                                                                   $dApplicative
  = HML.FileIO.MatrixSink.$s$fMonadResourceResourceT_$s$fMonadResourceResourceT_$cp4MonadResource
"SPEC/HML.FileIO.MatrixSink $fMonadResourceT @ (ExceptT String IO)" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                                                  (Control.Monad.Trans.Except.ExceptT
                                                                                                     GHC.Base.String
                                                                                                     GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fMonadResourceT @ (Control.Monad.Trans.Except.ExceptT
                                                              GHC.Base.String GHC.Types.IO)
                                                         $dMonad
  = HML.FileIO.MatrixSink.$s$fMonadBasebResourceT_$s$fMonadResourceT
"SPEC/HML.FileIO.MatrixSink $fMonadResourceT_$cfail @ (ExceptT
                                                        String IO)" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                                                                                                                 (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                    GHC.Base.String
                                                                                                                                                                    GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fMonadResourceT_$cfail @ (Control.Monad.Trans.Except.ExceptT
                                                                     GHC.Base.String GHC.Types.IO)
                                                                $dMonad
  = HML.FileIO.MatrixSink.$s$fMonadBasebResourceT_$s$fMonadResourceT_$cfail
"SPEC/HML.FileIO.MatrixSink $fMonadThrowExceptT @ IO _" [ALWAYS] forall @ e
                                                                        ($dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                           GHC.Types.IO)
  Control.Monad.Catch.$fMonadThrowExceptT @ GHC.Types.IO
                                          @ e
                                          $dMonadThrow
  = HML.FileIO.MatrixSink.$s$fMonadResourceResourceT_$s$fMonadThrowExceptT
      @ e
"SPEC/HML.FileIO.MatrixSink $fMonadThrowExceptT_$cp1MonadThrow @ IO _" [ALWAYS] forall @ e
                                                                                       ($dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                                          GHC.Types.IO)
  Control.Monad.Catch.$fMonadThrowExceptT_$cp1MonadThrow @ GHC.Types.IO
                                                         @ e
                                                         $dMonadThrow
  = HML.FileIO.MatrixSink.$s$fMonadBasebExceptT_$s$fMonadThrowExceptT_$cp1MonadThrow
      @ e
"SPEC/HML.FileIO.MatrixSink $fMonadThrowResourceT @ (ExceptT
                                                      String IO)" [ALWAYS] forall ($dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                                                                                                  (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                     GHC.Base.String
                                                                                                                                                                     GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fMonadThrowResourceT @ (Control.Monad.Trans.Except.ExceptT
                                                                   GHC.Base.String GHC.Types.IO)
                                                              $dMonadThrow
  = HML.FileIO.MatrixSink.$s$fMonadResourceResourceT_$s$fMonadThrowResourceT
"SPEC/HML.FileIO.MatrixSink $fMonadThrowResourceT_$cthrowM @ (ExceptT
                                                               String IO)" [ALWAYS] forall ($dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                                                                                                                    (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                       GHC.Base.String
                                                                                                                                                                                       GHC.Types.IO))
  Control.Monad.Trans.Resource.Internal.$fMonadThrowResourceT_$cthrowM @ (Control.Monad.Trans.Except.ExceptT
                                                                            GHC.Base.String
                                                                            GHC.Types.IO)
                                                                       $dMonadThrow
  = HML.FileIO.MatrixSink.$s$fMonadResourceResourceT_$s$fMonadThrowResourceT_$cthrowM
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

